class LRUCache {
    
    private int cap;
    private Map<Integer, Integer> cacheMap;
    private LinkedList<Integer> lruList;

    LRUCache(int cap) {
        
        this.cap = cap;
        this.cacheMap = new HashMap<>();
        this.lruList = new LinkedList<>();
        
    }

    public  int get(int key) {
        
        if(!cacheMap.containsKey(key)){
            return -1;
        }
        
        lruList.remove(Integer.valueOf(key));
        
        lruList.addFirst(key);
        
        return cacheMap.get(key);
    }

        
    public  void put(int key, int value) {
        
        if(cacheMap.containsKey(key)){
            cacheMap.put(key,value);
            lruList.remove(Integer.valueOf(key));
        }
        
        else{
            if(cacheMap.size() >= cap){
                int leastUsedKey = lruList.removeLast();
                cacheMap.remove(leastUsedKey);
            }
            cacheMap.put(key,value);
        }
        lruList.addFirst(key);
    }
}
