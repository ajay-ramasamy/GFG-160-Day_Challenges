class Solution {
    // Function to find a solved Sudoku.
    private static final int FULL = 0x3FE;
    
    static void solveSudoku(int[][] board) {
        int[] row = new int[9], col = new int[9], box = new int[9];
        List<int[]> blanks = new ArrayList<>();
        
        for(int i=0;i<9;i++){
            for(int j=0;j<9;j++){
                int v = board[i][j];
                if(v==0){
                    blanks.add(new int[]{i,j});
                }
                else{
                    int bit = 1<<v;
                    row[i] |= bit;
                    col[j] |= bit;
                    box[idx(i,j)] |= bit;
                }
            }
        }
        dfs(board,0,blanks,row,col,box);
    }
    
    private static boolean dfs(int[][] board, int pos, List<int[]> blanks, int[] row, int[] col, int[] box){
        if(pos==blanks.size()){
            return true;
        }
        
        int best = -1, bestCount =10, bestMask =0;
        for(int k=pos;k<blanks.size();k++){
            int i = blanks.get(k)[0], j=blanks.get(k)[1];
            int mask = ~(row[i] | col[j] | box[idx(i,j)]) & FULL;
            int cnt = Integer.bitCount(mask);
            if(cnt<bestCount){
                bestCount = cnt;
                best = k;
                bestMask = mask;
                if(cnt==1) break;
            }
        }
        Collections.swap(blanks,pos,best);
        int i = blanks.get(pos)[0], j=blanks.get(pos)[1];
        int mask = bestMask;
        
        while(mask!=0){
            int bit = mask & -mask;
            int v = Integer.numberOfTrailingZeros(bit);
            
            board[i][j] = v;
            row[i] |= bit; col[j] |= bit; box[idx(i,j)] |= bit;
            
            if(dfs(board, pos+1, blanks,row,col,box)){
                return true;
            }
            row[i] ^= bit; col[j] ^= bit; box[idx(i,j)] ^= bit;
            board[i][j] =0;
            
            mask ^= bit;
        }
        
        Collections.swap(blanks,pos,best);
        return false;
    }
    
    private static int idx(int i, int j){
        return (i/3)*3+j/3;
    }
}
